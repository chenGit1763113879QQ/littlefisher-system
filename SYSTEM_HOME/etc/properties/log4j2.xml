<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数-->
<configuration status="DEBUG">
  <appenders>
    <!--这个输出控制台的配置-->
    <console name="stdout" target="SYSTEM_OUT">
      <!--输出日志的格式-->
      <PatternLayout pattern="%p [%d{yyyy-MM-dd HH:mm:ss,SSS}] (%c:%L)- %m%n"/>
    </console>
    <!-- 这个会打印出所有的debug及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
    <RollingFile name="druidLogger" fileName="${SYSTEM_HOME}/log/sql.log"
                 filePattern="${SYSTEM_HOME}/log/$${date:yyyy-MM}/%d{yyyy-MM-dd}-%i-sql.log">
      <!--控制台只输出debug及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
      <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
      <PatternLayout pattern="%p [%d{yyyy-MM-dd HH:mm:ss,SSS}] (%c:%L)- %m%n"/>
      <!--指定滚动日志的策略，就是什么时候进行新建日志文件输出日志-->
      <Policies>
        <!--Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am.-->
        <TimeBasedTriggeringPolicy/>
        <!--Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.-->
        <SizeBasedTriggeringPolicy size="10 MB"/>
      </Policies>
      <!-- DefaultRolloverStrategy用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)，默认7-->
      <DefaultRolloverStrategy max="10"/>
    </RollingFile>

    <RollingFile name="allLogger" fileName="${SYSTEM_HOME}/log/all.log"
                 filePattern="${SYSTEM_HOME}/log/$${date:yyyy-MM}/%d{yyyy-MM-dd}-%i-all.log">
      <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
      <PatternLayout pattern="%p [%d{yyyy-MM-dd HH:mm:ss,SSS}] (%c:%L)- %m%n"/>
      <Policies>
        <TimeBasedTriggeringPolicy/>
        <SizeBasedTriggeringPolicy size="10 MB"/>
      </Policies>
      <DefaultRolloverStrategy max="10"/>
    </RollingFile>

    <RollingFile name="blogLogger" fileName="${SYSTEM_HOME}/log/business.log"
                 filePattern="${SYSTEM_HOME}/log/$${date:yyyy-MM}/%d{yyyy-MM-dd}-%i-business.log">
      <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
      <PatternLayout pattern="%p [%d{yyyy-MM-dd HH:mm:ss,SSS}] (%c:%L)- %m%n"/>
      <Policies>
        <TimeBasedTriggeringPolicy/>
        <SizeBasedTriggeringPolicy size="10 MB"/>
      </Policies>
      <DefaultRolloverStrategy max="10"/>
    </RollingFile>

  </appenders>
  <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
  <loggers>
    <!--把com.littlefisher.blog下的所有信息都打印到blogLogger中-->
    <logger name="com.littlefisher.blog" level="debug">
      <appender-ref ref="blogLogger"/>
      <appender-ref ref="stdout"/>
    </logger>
    <!--把druid.sql.Statement下的所有信息打印到druidLogger中-->
    <logger name="druid.sql.Statement" level="debug">
      <appender-ref ref="druidLogger"/>
    </logger>
    <root level="debug">
      <appender-ref ref="stdout"/>
      <appender-ref ref="allLogger"/>
    </root>
  </loggers>
</configuration>